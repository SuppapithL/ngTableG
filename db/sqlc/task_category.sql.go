// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task_category.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTaskCategory = `-- name: CreateTaskCategory :one
INSERT INTO task_categories (
  name,
  parent_id,
  description
) VALUES (
  $1, $2, $3
) RETURNING id, name, parent_id, description, created_at, updated_at
`

type CreateTaskCategoryParams struct {
	Name        string      `json:"name"`
	ParentID    pgtype.Int4 `json:"parentId"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateTaskCategory(ctx context.Context, arg CreateTaskCategoryParams) (TaskCategory, error) {
	row := q.db.QueryRow(ctx, createTaskCategory, arg.Name, arg.ParentID, arg.Description)
	var i TaskCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTaskCategory = `-- name: DeleteTaskCategory :exec
DELETE FROM task_categories
WHERE id = $1
`

func (q *Queries) DeleteTaskCategory(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTaskCategory, id)
	return err
}

const getTaskCategory = `-- name: GetTaskCategory :one
SELECT id, name, parent_id, description, created_at, updated_at FROM task_categories
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTaskCategory(ctx context.Context, id int32) (TaskCategory, error) {
	row := q.db.QueryRow(ctx, getTaskCategory, id)
	var i TaskCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRootTaskCategories = `-- name: ListRootTaskCategories :many
SELECT id, name, parent_id, description, created_at, updated_at FROM task_categories
WHERE parent_id IS NULL
ORDER BY name
`

func (q *Queries) ListRootTaskCategories(ctx context.Context) ([]TaskCategory, error) {
	rows, err := q.db.Query(ctx, listRootTaskCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TaskCategory{}
	for rows.Next() {
		var i TaskCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskCategories = `-- name: ListTaskCategories :many
SELECT id, name, parent_id, description, created_at, updated_at FROM task_categories
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListTaskCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTaskCategories(ctx context.Context, arg ListTaskCategoriesParams) ([]TaskCategory, error) {
	rows, err := q.db.Query(ctx, listTaskCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TaskCategory{}
	for rows.Next() {
		var i TaskCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskCategoriesByParent = `-- name: ListTaskCategoriesByParent :many
SELECT id, name, parent_id, description, created_at, updated_at FROM task_categories
WHERE parent_id = $1
ORDER BY name
`

func (q *Queries) ListTaskCategoriesByParent(ctx context.Context, parentID pgtype.Int4) ([]TaskCategory, error) {
	rows, err := q.db.Query(ctx, listTaskCategoriesByParent, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TaskCategory{}
	for rows.Next() {
		var i TaskCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskCategory = `-- name: UpdateTaskCategory :one
UPDATE task_categories
SET 
  name = COALESCE($2, name),
  parent_id = $3,
  description = COALESCE($4, description),
  updated_at = NOW()
WHERE id = $1
RETURNING id, name, parent_id, description, created_at, updated_at
`

type UpdateTaskCategoryParams struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	ParentID    pgtype.Int4 `json:"parentId"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateTaskCategory(ctx context.Context, arg UpdateTaskCategoryParams) (TaskCategory, error) {
	row := q.db.QueryRow(ctx, updateTaskCategory,
		arg.ID,
		arg.Name,
		arg.ParentID,
		arg.Description,
	)
	var i TaskCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
