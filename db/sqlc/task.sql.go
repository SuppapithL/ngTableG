// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
  url,
  task_category_id,
  note,
  title,
  status,
  status_color
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, url, task_category_id, note, title, status, status_color, created_at, updated_at
`

type CreateTaskParams struct {
	Url            pgtype.Text `json:"url"`
	TaskCategoryID pgtype.Int4 `json:"taskCategoryId"`
	Note           pgtype.Text `json:"note"`
	Title          pgtype.Text `json:"title"`
	Status         pgtype.Text `json:"status"`
	StatusColor    pgtype.Text `json:"statusColor"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Url,
		arg.TaskCategoryID,
		arg.Note,
		arg.Title,
		arg.Status,
		arg.StatusColor,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.TaskCategoryID,
		&i.Note,
		&i.Title,
		&i.Status,
		&i.StatusColor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, url, task_category_id, note, title, status, status_color, created_at, updated_at FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.TaskCategoryID,
		&i.Note,
		&i.Title,
		&i.Status,
		&i.StatusColor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, url, task_category_id, note, title, status, status_color, created_at, updated_at FROM tasks
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListTasksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.TaskCategoryID,
			&i.Note,
			&i.Title,
			&i.Status,
			&i.StatusColor,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksByCategory = `-- name: ListTasksByCategory :many
SELECT id, url, task_category_id, note, title, status, status_color, created_at, updated_at FROM tasks
WHERE task_category_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListTasksByCategory(ctx context.Context, taskCategoryID pgtype.Int4) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasksByCategory, taskCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.TaskCategoryID,
			&i.Note,
			&i.Title,
			&i.Status,
			&i.StatusColor,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksByCategoryWithSubcategories = `-- name: ListTasksByCategoryWithSubcategories :many
WITH RECURSIVE subcategories AS (
  -- Base case: the input category
  SELECT tc.id FROM task_categories tc WHERE tc.id = $1
  UNION ALL
  -- Recursive case: find all child categories
  SELECT tc.id FROM task_categories tc
  JOIN subcategories sc ON tc.parent_id = sc.id
)
SELECT t.id, t.url, t.task_category_id, t.note, t.title, t.status, t.status_color, t.created_at, t.updated_at FROM tasks t
WHERE t.task_category_id IN (SELECT sc.id FROM subcategories sc)
ORDER BY t.created_at DESC
`

func (q *Queries) ListTasksByCategoryWithSubcategories(ctx context.Context, id int32) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasksByCategoryWithSubcategories, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.TaskCategoryID,
			&i.Note,
			&i.Title,
			&i.Status,
			&i.StatusColor,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET 
  url = $2,
  task_category_id = $3,
  note = $4,
  title = $5,
  status = $6,
  status_color = $7,
  updated_at = NOW()
WHERE id = $1
RETURNING id, url, task_category_id, note, title, status, status_color, created_at, updated_at
`

type UpdateTaskParams struct {
	ID             int32       `json:"id"`
	Url            pgtype.Text `json:"url"`
	TaskCategoryID pgtype.Int4 `json:"taskCategoryId"`
	Note           pgtype.Text `json:"note"`
	Title          pgtype.Text `json:"title"`
	Status         pgtype.Text `json:"status"`
	StatusColor    pgtype.Text `json:"statusColor"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.ID,
		arg.Url,
		arg.TaskCategoryID,
		arg.Note,
		arg.Title,
		arg.Status,
		arg.StatusColor,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.TaskCategoryID,
		&i.Note,
		&i.Title,
		&i.Status,
		&i.StatusColor,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
