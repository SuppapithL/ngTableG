// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: holiday.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHoliday = `-- name: CreateHoliday :one
INSERT INTO holidays (
  date,
  name,
  note
) VALUES (
  $1, $2, $3
) RETURNING id, date, name, note, created_at
`

type CreateHolidayParams struct {
	Date pgtype.Date `json:"date"`
	Name string      `json:"name"`
	Note pgtype.Text `json:"note"`
}

func (q *Queries) CreateHoliday(ctx context.Context, arg CreateHolidayParams) (Holiday, error) {
	row := q.db.QueryRow(ctx, createHoliday, arg.Date, arg.Name, arg.Note)
	var i Holiday
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Name,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}

const deleteHoliday = `-- name: DeleteHoliday :exec
DELETE FROM holidays
WHERE id = $1
`

func (q *Queries) DeleteHoliday(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteHoliday, id)
	return err
}

const getHoliday = `-- name: GetHoliday :one
SELECT id, date, name, note, created_at FROM holidays
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHoliday(ctx context.Context, id int32) (Holiday, error) {
	row := q.db.QueryRow(ctx, getHoliday, id)
	var i Holiday
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Name,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}

const getHolidayByDate = `-- name: GetHolidayByDate :one
SELECT id, date, name, note, created_at FROM holidays
WHERE date = $1 LIMIT 1
`

func (q *Queries) GetHolidayByDate(ctx context.Context, date pgtype.Date) (Holiday, error) {
	row := q.db.QueryRow(ctx, getHolidayByDate, date)
	var i Holiday
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Name,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}

const listHolidays = `-- name: ListHolidays :many
SELECT id, date, name, note, created_at FROM holidays
ORDER BY date
LIMIT $1
OFFSET $2
`

type ListHolidaysParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListHolidays(ctx context.Context, arg ListHolidaysParams) ([]Holiday, error) {
	rows, err := q.db.Query(ctx, listHolidays, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Holiday{}
	for rows.Next() {
		var i Holiday
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Name,
			&i.Note,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHolidaysByYear = `-- name: ListHolidaysByYear :many
SELECT id, date, name, note, created_at FROM holidays
WHERE EXTRACT(YEAR FROM date) = $1
ORDER BY date
`

func (q *Queries) ListHolidaysByYear(ctx context.Context, date pgtype.Date) ([]Holiday, error) {
	rows, err := q.db.Query(ctx, listHolidaysByYear, date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Holiday{}
	for rows.Next() {
		var i Holiday
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Name,
			&i.Note,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHoliday = `-- name: UpdateHoliday :one
UPDATE holidays
SET 
  date = COALESCE($2, date),
  name = COALESCE($3, name),
  note = COALESCE($4, note)
WHERE id = $1
RETURNING id, date, name, note, created_at
`

type UpdateHolidayParams struct {
	ID   int32       `json:"id"`
	Date pgtype.Date `json:"date"`
	Name string      `json:"name"`
	Note pgtype.Text `json:"note"`
}

func (q *Queries) UpdateHoliday(ctx context.Context, arg UpdateHolidayParams) (Holiday, error) {
	row := q.db.QueryRow(ctx, updateHoliday,
		arg.ID,
		arg.Date,
		arg.Name,
		arg.Note,
	)
	var i Holiday
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Name,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}
