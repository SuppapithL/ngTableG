// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: leave_log.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLeaveLog = `-- name: CreateLeaveLog :one
INSERT INTO leave_logs (
  user_id,
  type,
  date,
  note
) VALUES (
  $1, $2, $3, $4
) RETURNING id, user_id, type, date, note, created_at
`

type CreateLeaveLogParams struct {
	UserID int32       `json:"userId"`
	Type   string      `json:"type"`
	Date   pgtype.Date `json:"date"`
	Note   pgtype.Text `json:"note"`
}

func (q *Queries) CreateLeaveLog(ctx context.Context, arg CreateLeaveLogParams) (LeaveLog, error) {
	row := q.db.QueryRow(ctx, createLeaveLog,
		arg.UserID,
		arg.Type,
		arg.Date,
		arg.Note,
	)
	var i LeaveLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Date,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLeaveLog = `-- name: DeleteLeaveLog :exec
DELETE FROM leave_logs
WHERE id = $1
`

func (q *Queries) DeleteLeaveLog(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteLeaveLog, id)
	return err
}

const getLeaveLog = `-- name: GetLeaveLog :one
SELECT id, user_id, type, date, note, created_at FROM leave_logs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLeaveLog(ctx context.Context, id int32) (LeaveLog, error) {
	row := q.db.QueryRow(ctx, getLeaveLog, id)
	var i LeaveLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Date,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}

const listLeaveLogsByDateRange = `-- name: ListLeaveLogsByDateRange :many
SELECT id, user_id, type, date, note, created_at FROM leave_logs
WHERE user_id = $1 AND date BETWEEN $2 AND $3
ORDER BY date DESC
`

type ListLeaveLogsByDateRangeParams struct {
	UserID int32       `json:"userId"`
	Date   pgtype.Date `json:"date"`
	Date_2 pgtype.Date `json:"date2"`
}

func (q *Queries) ListLeaveLogsByDateRange(ctx context.Context, arg ListLeaveLogsByDateRangeParams) ([]LeaveLog, error) {
	rows, err := q.db.Query(ctx, listLeaveLogsByDateRange, arg.UserID, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LeaveLog{}
	for rows.Next() {
		var i LeaveLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.Date,
			&i.Note,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLeaveLogsByType = `-- name: ListLeaveLogsByType :many
SELECT id, user_id, type, date, note, created_at FROM leave_logs
WHERE user_id = $1 AND type = $2
ORDER BY date DESC
LIMIT $3
OFFSET $4
`

type ListLeaveLogsByTypeParams struct {
	UserID int32  `json:"userId"`
	Type   string `json:"type"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListLeaveLogsByType(ctx context.Context, arg ListLeaveLogsByTypeParams) ([]LeaveLog, error) {
	rows, err := q.db.Query(ctx, listLeaveLogsByType,
		arg.UserID,
		arg.Type,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LeaveLog{}
	for rows.Next() {
		var i LeaveLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.Date,
			&i.Note,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLeaveLogsByUser = `-- name: ListLeaveLogsByUser :many
SELECT id, user_id, type, date, note, created_at FROM leave_logs
WHERE user_id = $1
ORDER BY date DESC
LIMIT $2
OFFSET $3
`

type ListLeaveLogsByUserParams struct {
	UserID int32 `json:"userId"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLeaveLogsByUser(ctx context.Context, arg ListLeaveLogsByUserParams) ([]LeaveLog, error) {
	rows, err := q.db.Query(ctx, listLeaveLogsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LeaveLog{}
	for rows.Next() {
		var i LeaveLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.Date,
			&i.Note,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLeaveLogsByYear = `-- name: ListLeaveLogsByYear :many
SELECT id, user_id, type, date, note, created_at FROM leave_logs
WHERE user_id = $1 AND EXTRACT(YEAR FROM date) = $2
ORDER BY date DESC
`

type ListLeaveLogsByYearParams struct {
	UserID int32       `json:"userId"`
	Date   pgtype.Date `json:"date"`
}

func (q *Queries) ListLeaveLogsByYear(ctx context.Context, arg ListLeaveLogsByYearParams) ([]LeaveLog, error) {
	rows, err := q.db.Query(ctx, listLeaveLogsByYear, arg.UserID, arg.Date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LeaveLog{}
	for rows.Next() {
		var i LeaveLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.Date,
			&i.Note,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLeaveLog = `-- name: UpdateLeaveLog :one
UPDATE leave_logs
SET 
  type = $2,
  date = $3,
  note = $4
WHERE id = $1
RETURNING id, user_id, type, date, note, created_at
`

type UpdateLeaveLogParams struct {
	ID   int32       `json:"id"`
	Type string      `json:"type"`
	Date pgtype.Date `json:"date"`
	Note pgtype.Text `json:"note"`
}

func (q *Queries) UpdateLeaveLog(ctx context.Context, arg UpdateLeaveLogParams) (LeaveLog, error) {
	row := q.db.QueryRow(ctx, updateLeaveLog,
		arg.ID,
		arg.Type,
		arg.Date,
		arg.Note,
	)
	var i LeaveLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Date,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}
