// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: medical_expense.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMedicalExpense = `-- name: CreateMedicalExpense :one
INSERT INTO medical_expenses (
  user_id,
  amount,
  receipt_name,
  receipt_date,
  note
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, user_id, amount, receipt_name, receipt_date, note, created_at
`

type CreateMedicalExpenseParams struct {
	UserID      int32          `json:"userId"`
	Amount      pgtype.Numeric `json:"amount"`
	ReceiptName pgtype.Text    `json:"receiptName"`
	ReceiptDate pgtype.Date    `json:"receiptDate"`
	Note        pgtype.Text    `json:"note"`
}

func (q *Queries) CreateMedicalExpense(ctx context.Context, arg CreateMedicalExpenseParams) (MedicalExpense, error) {
	row := q.db.QueryRow(ctx, createMedicalExpense,
		arg.UserID,
		arg.Amount,
		arg.ReceiptName,
		arg.ReceiptDate,
		arg.Note,
	)
	var i MedicalExpense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.ReceiptName,
		&i.ReceiptDate,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMedicalExpense = `-- name: DeleteMedicalExpense :exec
DELETE FROM medical_expenses
WHERE id = $1
`

func (q *Queries) DeleteMedicalExpense(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteMedicalExpense, id)
	return err
}

const getMedicalExpense = `-- name: GetMedicalExpense :one
SELECT id, user_id, amount, receipt_name, receipt_date, note, created_at FROM medical_expenses
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMedicalExpense(ctx context.Context, id int32) (MedicalExpense, error) {
	row := q.db.QueryRow(ctx, getMedicalExpense, id)
	var i MedicalExpense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.ReceiptName,
		&i.ReceiptDate,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}

const listMedicalExpensesByUser = `-- name: ListMedicalExpensesByUser :many
SELECT id, user_id, amount, receipt_name, receipt_date, note, created_at FROM medical_expenses
WHERE user_id = $1
ORDER BY receipt_date DESC
LIMIT $2
OFFSET $3
`

type ListMedicalExpensesByUserParams struct {
	UserID int32 `json:"userId"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMedicalExpensesByUser(ctx context.Context, arg ListMedicalExpensesByUserParams) ([]MedicalExpense, error) {
	rows, err := q.db.Query(ctx, listMedicalExpensesByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MedicalExpense{}
	for rows.Next() {
		var i MedicalExpense
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.ReceiptName,
			&i.ReceiptDate,
			&i.Note,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMedicalExpensesByYear = `-- name: ListMedicalExpensesByYear :many
SELECT id, user_id, amount, receipt_name, receipt_date, note, created_at FROM medical_expenses
WHERE user_id = $1 AND EXTRACT(YEAR FROM receipt_date) = $2
ORDER BY receipt_date DESC
`

type ListMedicalExpensesByYearParams struct {
	UserID      int32       `json:"userId"`
	ReceiptDate pgtype.Date `json:"receiptDate"`
}

func (q *Queries) ListMedicalExpensesByYear(ctx context.Context, arg ListMedicalExpensesByYearParams) ([]MedicalExpense, error) {
	rows, err := q.db.Query(ctx, listMedicalExpensesByYear, arg.UserID, arg.ReceiptDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MedicalExpense{}
	for rows.Next() {
		var i MedicalExpense
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.ReceiptName,
			&i.ReceiptDate,
			&i.Note,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMedicalExpense = `-- name: UpdateMedicalExpense :one
UPDATE medical_expenses
SET 
  amount = $2,
  receipt_name = $3,
  receipt_date = $4,
  note = $5
WHERE id = $1
RETURNING id, user_id, amount, receipt_name, receipt_date, note, created_at
`

type UpdateMedicalExpenseParams struct {
	ID          int32          `json:"id"`
	Amount      pgtype.Numeric `json:"amount"`
	ReceiptName pgtype.Text    `json:"receiptName"`
	ReceiptDate pgtype.Date    `json:"receiptDate"`
	Note        pgtype.Text    `json:"note"`
}

func (q *Queries) UpdateMedicalExpense(ctx context.Context, arg UpdateMedicalExpenseParams) (MedicalExpense, error) {
	row := q.db.QueryRow(ctx, updateMedicalExpense,
		arg.ID,
		arg.Amount,
		arg.ReceiptName,
		arg.ReceiptDate,
		arg.Note,
	)
	var i MedicalExpense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.ReceiptName,
		&i.ReceiptDate,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}
