// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: quota_plan.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createQuotaPlan = `-- name: CreateQuotaPlan :one
INSERT INTO quota_plans (
  plan_name,
  year,
  quota_vacation_day,
  quota_medical_expense_baht,
  created_by_user_id
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, plan_name, year, quota_vacation_day, quota_medical_expense_baht, created_by_user_id, created_at, updated_at
`

type CreateQuotaPlanParams struct {
	PlanName                string         `json:"planName"`
	Year                    int32          `json:"year"`
	QuotaVacationDay        pgtype.Numeric `json:"quotaVacationDay"`
	QuotaMedicalExpenseBaht pgtype.Numeric `json:"quotaMedicalExpenseBaht"`
	CreatedByUserID         pgtype.Int4    `json:"createdByUserId"`
}

func (q *Queries) CreateQuotaPlan(ctx context.Context, arg CreateQuotaPlanParams) (QuotaPlan, error) {
	row := q.db.QueryRow(ctx, createQuotaPlan,
		arg.PlanName,
		arg.Year,
		arg.QuotaVacationDay,
		arg.QuotaMedicalExpenseBaht,
		arg.CreatedByUserID,
	)
	var i QuotaPlan
	err := row.Scan(
		&i.ID,
		&i.PlanName,
		&i.Year,
		&i.QuotaVacationDay,
		&i.QuotaMedicalExpenseBaht,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteQuotaPlan = `-- name: DeleteQuotaPlan :exec
DELETE FROM quota_plans
WHERE id = $1
`

func (q *Queries) DeleteQuotaPlan(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteQuotaPlan, id)
	return err
}

const getQuotaPlan = `-- name: GetQuotaPlan :one
SELECT id, plan_name, year, quota_vacation_day, quota_medical_expense_baht, created_by_user_id, created_at, updated_at FROM quota_plans
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetQuotaPlan(ctx context.Context, id int32) (QuotaPlan, error) {
	row := q.db.QueryRow(ctx, getQuotaPlan, id)
	var i QuotaPlan
	err := row.Scan(
		&i.ID,
		&i.PlanName,
		&i.Year,
		&i.QuotaVacationDay,
		&i.QuotaMedicalExpenseBaht,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQuotaPlanByNameAndYear = `-- name: GetQuotaPlanByNameAndYear :one
SELECT id, plan_name, year, quota_vacation_day, quota_medical_expense_baht, created_by_user_id, created_at, updated_at FROM quota_plans
WHERE plan_name = $1 AND year = $2
LIMIT 1
`

type GetQuotaPlanByNameAndYearParams struct {
	PlanName string `json:"planName"`
	Year     int32  `json:"year"`
}

func (q *Queries) GetQuotaPlanByNameAndYear(ctx context.Context, arg GetQuotaPlanByNameAndYearParams) (QuotaPlan, error) {
	row := q.db.QueryRow(ctx, getQuotaPlanByNameAndYear, arg.PlanName, arg.Year)
	var i QuotaPlan
	err := row.Scan(
		&i.ID,
		&i.PlanName,
		&i.Year,
		&i.QuotaVacationDay,
		&i.QuotaMedicalExpenseBaht,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listQuotaPlans = `-- name: ListQuotaPlans :many
SELECT id, plan_name, year, quota_vacation_day, quota_medical_expense_baht, created_by_user_id, created_at, updated_at FROM quota_plans
ORDER BY year DESC, plan_name
`

func (q *Queries) ListQuotaPlans(ctx context.Context) ([]QuotaPlan, error) {
	rows, err := q.db.Query(ctx, listQuotaPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []QuotaPlan{}
	for rows.Next() {
		var i QuotaPlan
		if err := rows.Scan(
			&i.ID,
			&i.PlanName,
			&i.Year,
			&i.QuotaVacationDay,
			&i.QuotaMedicalExpenseBaht,
			&i.CreatedByUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuotaPlansByYear = `-- name: ListQuotaPlansByYear :many
SELECT id, plan_name, year, quota_vacation_day, quota_medical_expense_baht, created_by_user_id, created_at, updated_at FROM quota_plans
WHERE year = $1
ORDER BY plan_name
`

func (q *Queries) ListQuotaPlansByYear(ctx context.Context, year int32) ([]QuotaPlan, error) {
	rows, err := q.db.Query(ctx, listQuotaPlansByYear, year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []QuotaPlan{}
	for rows.Next() {
		var i QuotaPlan
		if err := rows.Scan(
			&i.ID,
			&i.PlanName,
			&i.Year,
			&i.QuotaVacationDay,
			&i.QuotaMedicalExpenseBaht,
			&i.CreatedByUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuotaPlan = `-- name: UpdateQuotaPlan :one
UPDATE quota_plans
SET 
  plan_name = COALESCE($1, plan_name),
  year = COALESCE($2, year),
  quota_vacation_day = COALESCE($3, quota_vacation_day),
  quota_medical_expense_baht = COALESCE($4, quota_medical_expense_baht),
  updated_at = NOW()
WHERE id = $5
RETURNING id, plan_name, year, quota_vacation_day, quota_medical_expense_baht, created_by_user_id, created_at, updated_at
`

type UpdateQuotaPlanParams struct {
	PlanName                string         `json:"planName"`
	Year                    int32          `json:"year"`
	QuotaVacationDay        pgtype.Numeric `json:"quotaVacationDay"`
	QuotaMedicalExpenseBaht pgtype.Numeric `json:"quotaMedicalExpenseBaht"`
	ID                      int32          `json:"id"`
}

func (q *Queries) UpdateQuotaPlan(ctx context.Context, arg UpdateQuotaPlanParams) (QuotaPlan, error) {
	row := q.db.QueryRow(ctx, updateQuotaPlan,
		arg.PlanName,
		arg.Year,
		arg.QuotaVacationDay,
		arg.QuotaMedicalExpenseBaht,
		arg.ID,
	)
	var i QuotaPlan
	err := row.Scan(
		&i.ID,
		&i.PlanName,
		&i.Year,
		&i.QuotaVacationDay,
		&i.QuotaMedicalExpenseBaht,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
