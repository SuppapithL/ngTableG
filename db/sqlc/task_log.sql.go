// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task_log.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTaskLog = `-- name: CreateTaskLog :one
INSERT INTO task_logs (
  task_id,
  worked_day,
  created_by_user_id,
  worked_date,
  is_work_on_holiday
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, task_id, worked_day, created_by_user_id, worked_date, created_at, is_work_on_holiday
`

type CreateTaskLogParams struct {
	TaskID          int32          `json:"taskId"`
	WorkedDay       pgtype.Numeric `json:"workedDay"`
	CreatedByUserID int32          `json:"createdByUserId"`
	WorkedDate      pgtype.Date    `json:"workedDate"`
	IsWorkOnHoliday pgtype.Bool    `json:"isWorkOnHoliday"`
}

func (q *Queries) CreateTaskLog(ctx context.Context, arg CreateTaskLogParams) (TaskLog, error) {
	row := q.db.QueryRow(ctx, createTaskLog,
		arg.TaskID,
		arg.WorkedDay,
		arg.CreatedByUserID,
		arg.WorkedDate,
		arg.IsWorkOnHoliday,
	)
	var i TaskLog
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.WorkedDay,
		&i.CreatedByUserID,
		&i.WorkedDate,
		&i.CreatedAt,
		&i.IsWorkOnHoliday,
	)
	return i, err
}

const deleteTaskLog = `-- name: DeleteTaskLog :exec
DELETE FROM task_logs
WHERE id = $1
`

func (q *Queries) DeleteTaskLog(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTaskLog, id)
	return err
}

const getTaskLog = `-- name: GetTaskLog :one
SELECT id, task_id, worked_day, created_by_user_id, worked_date, created_at, is_work_on_holiday FROM task_logs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTaskLog(ctx context.Context, id int32) (TaskLog, error) {
	row := q.db.QueryRow(ctx, getTaskLog, id)
	var i TaskLog
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.WorkedDay,
		&i.CreatedByUserID,
		&i.WorkedDate,
		&i.CreatedAt,
		&i.IsWorkOnHoliday,
	)
	return i, err
}

const listTaskLogsByDateRange = `-- name: ListTaskLogsByDateRange :many
SELECT id, task_id, worked_day, created_by_user_id, worked_date, created_at, is_work_on_holiday FROM task_logs
WHERE worked_date BETWEEN $1 AND $2
ORDER BY worked_date DESC
`

type ListTaskLogsByDateRangeParams struct {
	WorkedDate   pgtype.Date `json:"workedDate"`
	WorkedDate_2 pgtype.Date `json:"workedDate2"`
}

func (q *Queries) ListTaskLogsByDateRange(ctx context.Context, arg ListTaskLogsByDateRangeParams) ([]TaskLog, error) {
	rows, err := q.db.Query(ctx, listTaskLogsByDateRange, arg.WorkedDate, arg.WorkedDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TaskLog{}
	for rows.Next() {
		var i TaskLog
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.WorkedDay,
			&i.CreatedByUserID,
			&i.WorkedDate,
			&i.CreatedAt,
			&i.IsWorkOnHoliday,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskLogsByTask = `-- name: ListTaskLogsByTask :many
SELECT id, task_id, worked_day, created_by_user_id, worked_date, created_at, is_work_on_holiday FROM task_logs
WHERE task_id = $1
ORDER BY worked_date DESC
`

func (q *Queries) ListTaskLogsByTask(ctx context.Context, taskID int32) ([]TaskLog, error) {
	rows, err := q.db.Query(ctx, listTaskLogsByTask, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TaskLog{}
	for rows.Next() {
		var i TaskLog
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.WorkedDay,
			&i.CreatedByUserID,
			&i.WorkedDate,
			&i.CreatedAt,
			&i.IsWorkOnHoliday,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskLogsByUser = `-- name: ListTaskLogsByUser :many
SELECT id, task_id, worked_day, created_by_user_id, worked_date, created_at, is_work_on_holiday FROM task_logs
WHERE created_by_user_id = $1
ORDER BY worked_date DESC
LIMIT $2
OFFSET $3
`

type ListTaskLogsByUserParams struct {
	CreatedByUserID int32 `json:"createdByUserId"`
	Limit           int32 `json:"limit"`
	Offset          int32 `json:"offset"`
}

func (q *Queries) ListTaskLogsByUser(ctx context.Context, arg ListTaskLogsByUserParams) ([]TaskLog, error) {
	rows, err := q.db.Query(ctx, listTaskLogsByUser, arg.CreatedByUserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TaskLog{}
	for rows.Next() {
		var i TaskLog
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.WorkedDay,
			&i.CreatedByUserID,
			&i.WorkedDate,
			&i.CreatedAt,
			&i.IsWorkOnHoliday,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskLogsByUserAndDateRange = `-- name: ListTaskLogsByUserAndDateRange :many
SELECT id, task_id, worked_day, created_by_user_id, worked_date, created_at, is_work_on_holiday FROM task_logs
WHERE created_by_user_id = $1 AND worked_date BETWEEN $2 AND $3
ORDER BY worked_date DESC
`

type ListTaskLogsByUserAndDateRangeParams struct {
	CreatedByUserID int32       `json:"createdByUserId"`
	WorkedDate      pgtype.Date `json:"workedDate"`
	WorkedDate_2    pgtype.Date `json:"workedDate2"`
}

func (q *Queries) ListTaskLogsByUserAndDateRange(ctx context.Context, arg ListTaskLogsByUserAndDateRangeParams) ([]TaskLog, error) {
	rows, err := q.db.Query(ctx, listTaskLogsByUserAndDateRange, arg.CreatedByUserID, arg.WorkedDate, arg.WorkedDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TaskLog{}
	for rows.Next() {
		var i TaskLog
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.WorkedDay,
			&i.CreatedByUserID,
			&i.WorkedDate,
			&i.CreatedAt,
			&i.IsWorkOnHoliday,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskLog = `-- name: UpdateTaskLog :one
UPDATE task_logs
SET 
  worked_day = $2,
  worked_date = $3,
  is_work_on_holiday = $4
WHERE id = $1
RETURNING id, task_id, worked_day, created_by_user_id, worked_date, created_at, is_work_on_holiday
`

type UpdateTaskLogParams struct {
	ID              int32          `json:"id"`
	WorkedDay       pgtype.Numeric `json:"workedDay"`
	WorkedDate      pgtype.Date    `json:"workedDate"`
	IsWorkOnHoliday pgtype.Bool    `json:"isWorkOnHoliday"`
}

func (q *Queries) UpdateTaskLog(ctx context.Context, arg UpdateTaskLogParams) (TaskLog, error) {
	row := q.db.QueryRow(ctx, updateTaskLog,
		arg.ID,
		arg.WorkedDay,
		arg.WorkedDate,
		arg.IsWorkOnHoliday,
	)
	var i TaskLog
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.WorkedDay,
		&i.CreatedByUserID,
		&i.WorkedDate,
		&i.CreatedAt,
		&i.IsWorkOnHoliday,
	)
	return i, err
}
