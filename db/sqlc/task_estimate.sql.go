// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task_estimate.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTaskEstimate = `-- name: CreateTaskEstimate :one
INSERT INTO task_estimates (
  task_id,
  estimate_day,
  note,
  created_by_user_id
) VALUES (
  $1, $2, $3, $4
) RETURNING id, task_id, estimate_day, note, created_by_user_id, created_at
`

type CreateTaskEstimateParams struct {
	TaskID          int32          `json:"taskId"`
	EstimateDay     pgtype.Numeric `json:"estimateDay"`
	Note            pgtype.Text    `json:"note"`
	CreatedByUserID int32          `json:"createdByUserId"`
}

func (q *Queries) CreateTaskEstimate(ctx context.Context, arg CreateTaskEstimateParams) (TaskEstimate, error) {
	row := q.db.QueryRow(ctx, createTaskEstimate,
		arg.TaskID,
		arg.EstimateDay,
		arg.Note,
		arg.CreatedByUserID,
	)
	var i TaskEstimate
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.EstimateDay,
		&i.Note,
		&i.CreatedByUserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTaskEstimate = `-- name: DeleteTaskEstimate :exec
DELETE FROM task_estimates
WHERE id = $1
`

func (q *Queries) DeleteTaskEstimate(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTaskEstimate, id)
	return err
}

const getTaskEstimate = `-- name: GetTaskEstimate :one
SELECT id, task_id, estimate_day, note, created_by_user_id, created_at FROM task_estimates
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTaskEstimate(ctx context.Context, id int32) (TaskEstimate, error) {
	row := q.db.QueryRow(ctx, getTaskEstimate, id)
	var i TaskEstimate
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.EstimateDay,
		&i.Note,
		&i.CreatedByUserID,
		&i.CreatedAt,
	)
	return i, err
}

const listTaskEstimatesByTask = `-- name: ListTaskEstimatesByTask :many
SELECT id, task_id, estimate_day, note, created_by_user_id, created_at FROM task_estimates
WHERE task_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListTaskEstimatesByTask(ctx context.Context, taskID int32) ([]TaskEstimate, error) {
	rows, err := q.db.Query(ctx, listTaskEstimatesByTask, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TaskEstimate{}
	for rows.Next() {
		var i TaskEstimate
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.EstimateDay,
			&i.Note,
			&i.CreatedByUserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTaskEstimatesByUser = `-- name: ListTaskEstimatesByUser :many
SELECT id, task_id, estimate_day, note, created_by_user_id, created_at FROM task_estimates
WHERE created_by_user_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListTaskEstimatesByUserParams struct {
	CreatedByUserID int32 `json:"createdByUserId"`
	Limit           int32 `json:"limit"`
	Offset          int32 `json:"offset"`
}

func (q *Queries) ListTaskEstimatesByUser(ctx context.Context, arg ListTaskEstimatesByUserParams) ([]TaskEstimate, error) {
	rows, err := q.db.Query(ctx, listTaskEstimatesByUser, arg.CreatedByUserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TaskEstimate{}
	for rows.Next() {
		var i TaskEstimate
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.EstimateDay,
			&i.Note,
			&i.CreatedByUserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskEstimate = `-- name: UpdateTaskEstimate :one
UPDATE task_estimates
SET 
  estimate_day = $2,
  note = $3
WHERE id = $1
RETURNING id, task_id, estimate_day, note, created_by_user_id, created_at
`

type UpdateTaskEstimateParams struct {
	ID          int32          `json:"id"`
	EstimateDay pgtype.Numeric `json:"estimateDay"`
	Note        pgtype.Text    `json:"note"`
}

func (q *Queries) UpdateTaskEstimate(ctx context.Context, arg UpdateTaskEstimateParams) (TaskEstimate, error) {
	row := q.db.QueryRow(ctx, updateTaskEstimate, arg.ID, arg.EstimateDay, arg.Note)
	var i TaskEstimate
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.EstimateDay,
		&i.Note,
		&i.CreatedByUserID,
		&i.CreatedAt,
	)
	return i, err
}
